/* Lecture 1 - Introduction to CSS */

/*  CSS is the language we use to style an HTML document
      - Stands for Cascading Style Sheets
      - CSS describes how HTML elements should be displayed */

/* CSS Syntax
        selector {
            property-name: value;
        }
        body {
          background-color: black;
        }
    - The declaration block contains one or more declarations separated by semicolons
    - Each declaration includes a CSS property name and a value, separated by a colon
    - Multiple CSS declarations are separated with semicolons, and declaration blocks are surrounded by curly braces
*/
body {
  /* declaration */
  background-color: lightblue;
  /* declaration */
  /* Do not add a space between the property value (20) and the unit (px):
      Incorrect (space): margin-left: 20 px;
      Correct (no space): margin-left: 20px; */
  font-size: 20px;
}

/* Here,
    h1 is a selector in CSS (it points to the HTML element you want to style: <h1>).
    color is a property, and red is the property value
    text-align is a property, and center is the property value */
h1 {
  color: red;
  text-align: center;
}

/* CSS Selectors
    CSS selectors are used to "find" (or select) the HTML elements you want to style.
    
    We can divide CSS selectors into five categories:
        - Simple selectors (select elements based on name, id, class)
        - Combinator selectors (select elements based on a specific relationship between them)
        - Pseudo-class selectors (select elements based on a certain state)
        - Pseudo-elements selectors (select and style a part of an element)
        - Attribute selectors (select elements based on an attribute or attribute value)
        (we will understand Simple Selectors now, others will be cover later on) */

/* Simple Selectors */

/* 1) Element Selector
        - The element selector selects HTML elements based on the element name
        - Here, all <p> elements on the page will be center-aligned, with a red text color */
p {
  text-align: center;
  background-color: black;
  color: red;
}

/* 2) ID Selector
    - The id selector uses the id attribute of an HTML element to select a specific element
    - The id of an element is unique within a page, so the id selector is used to select one unique element!
    - To select an element with a specific id, write a hash (#) character, followed by the id of the element
    - Here, the CSS rule below will be applied to the HTML element with id="para1" */
#tagline {
  text-align: right;
  color: orange;
}

/* 3) Class Selector
    - The class selector selects HTML elements with a specific class attribute
    - To select elements with a specific class, write a period (.) character, followed by the class name */
.inline-divs {
  display: inline;
  background-color: azure;
}

.bg-red {
  background-color: red;
}

/* You can also specify that only specific HTML elements should be affected by a class */
td.bg-red {
  background-color: red;
}

/* 4) Universal Selector
    - The universal selector (*) selects all HTML elements on the page
    - Here, the CSS rule below will affect every HTML element on the page */
* {
  text-align: center;
  color: blue;
}

/* 5) Grouping Selector
    - The grouping selector selects all the HTML elements with the same style definitions
    - It will be better to group the selectors, to minimize the code
      h1 {
        text-align: center;
        color: red;
      }
      h2 {
        text-align: center;
        color: red;
      }
      p {
        text-align: center;
        color: red;
      }
    - To group selectors, separate each selector with a comma
    - You can also group by ids, classes, element's names aswell */
h1,
h2,
p {
  text-align: center;
  color: blue;
}

#tagline, #section, #blue {
  color: aquamarine;
}

.bg-red, .main, .inline-divs {
  display: block;
}

h1, #tagline, .bg-red {
  padding: 5px;
}

/* How To Add CSS
    There are three ways of inserting a style sheet:
      Inline CSS
      Internal CSS
      External CSS */

/* 1) Inline CSS
  - An inline style may be used to apply a unique style for a single element
  - To use inline styles, add the style attribute to the relevant element. The style attribute can contain any CSS property
    <body>
      <h1 style="color:blue; text-align:center;">This is a heading</h1>
      <p style="color:red;">This is a paragraph.</p>
    </body> */

/* 2) Internal CSS
  - An internal style sheet may be used if one single HTML page has a unique style
  - The internal style is defined inside the <style> element, inside the head section
    <!DOCTYPE html>
    <html>
      <head>
        <style>
          body {
            background-color: linen;
          }
          
          h1 {
            color: maroon;
            margin-left: 40px;
          }
        </style>
      </head>
      <body>
        <h1>This is a heading</h1>
        <p>This is a paragraph.</p>
      </body>
    </html> */

/* 3) External CSS
  - With an external style sheet, you can change the look of an entire website by changing just one file
  - External styles are defined within the <link> element, inside the <head> section of an HTML page
  - An external style sheet can be written in any text editor, and must be saved with a .css extension
  - The external .css file should not contain any HTML tags
    <!DOCTYPE html>
    <html>
      <head>
        <link rel="stylesheet" href="mystyle.css">
      </head>
      <body>
        <h1>This is a heading</h1>
        <p>This is a paragraph.</p>
      </body>
    </html> */

/* Cascading Order
    - What style will be used when there is more than one style specified for an HTML element?
    - All the styles in a page will "cascade" into a new "virtual" style sheet by the following rules, where number one has the highest priority:
        1. Inline style (inside an HTML element)
        2. External and internal style sheets (in the head section)
        3. Browser default
      - So, an inline style has the highest priority, and will override external and internal styles and browser defaults.
 */
 
 .bg-red {
   color: blue;
  }
  h1 {
   color: yellow;
  }
